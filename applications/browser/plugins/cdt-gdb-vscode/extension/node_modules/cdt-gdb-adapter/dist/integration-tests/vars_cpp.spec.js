"use strict";
/*********************************************************************
 * Copyright (c) 2018 QNX Software Systems and others
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *********************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const path = require("path");
const utils_1 = require("./utils");
describe('Variables CPP Test Suite', function () {
    let dc;
    let scope;
    const varsCppProgram = path.join(utils_1.testProgramsDir, 'vars_cpp');
    const varsCppSrc = path.join(utils_1.testProgramsDir, 'vars_cpp.cpp');
    const lineTags = {
        'STOP HERE': 0,
    };
    before(function () {
        (0, utils_1.resolveLineTagLocations)(varsCppSrc, lineTags);
    });
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            dc = yield (0, utils_1.standardBeforeEach)();
            yield dc.hitBreakpoint((0, utils_1.fillDefaults)(this.currentTest, {
                program: varsCppProgram,
            }), {
                path: varsCppSrc,
                line: lineTags['STOP HERE'],
            });
            scope = yield (0, utils_1.getScopes)(dc);
            (0, chai_1.expect)(scope.scopes.body.scopes.length, 'Unexpected number of scopes returned').to.equal(2);
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield dc.stop();
        });
    });
    it('can read and set a cpp object variable', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // check the initial conditions of the two variables
            const vr = scope.scopes.body.scopes[0].variablesReference;
            const vars = yield dc.variablesRequest({ variablesReference: vr });
            (0, chai_1.expect)(vars.body.variables.length, 'There is a different number of variables than expected').to.equal(3);
            (0, utils_1.verifyVariable)(vars.body.variables[0], 'fooA', 'Foo *', undefined, {
                hasChildren: true,
            });
            (0, utils_1.verifyVariable)(vars.body.variables[1], 'fooB', 'Foo *', undefined, {
                hasChildren: true,
            });
            (0, chai_1.expect)(vars.body.variables[0].value, 'Value of fooA matches fooB').to.not.equal(vars.body.variables[1].value);
            // check that the children names and values are the same, but values are different
            let childrenA = yield dc.variablesRequest({
                variablesReference: vars.body.variables[0].variablesReference,
            });
            let childrenB = yield dc.variablesRequest({
                variablesReference: vars.body.variables[1].variablesReference,
            });
            (0, chai_1.expect)(childrenA.body.variables.length, 'There is a different number of child variables than expected').to.equal(childrenB.body.variables.length);
            (0, utils_1.compareVariable)(childrenA.body.variables[0], childrenB.body.variables[0], true, true, false);
            (0, utils_1.compareVariable)(childrenA.body.variables[1], childrenB.body.variables[1], true, true, false);
            (0, utils_1.compareVariable)(childrenA.body.variables[2], childrenB.body.variables[2], true, true, false);
            // set fooA to be equal to fooB.
            const setFooA = yield dc.setVariableRequest({
                name: 'fooA',
                value: vars.body.variables[1].value,
                variablesReference: vr,
            });
            (0, chai_1.expect)(setFooA.body.value).to.equal(vars.body.variables[1].value);
            // check types and value after the set
            const vars2 = yield dc.variablesRequest({ variablesReference: vr });
            (0, chai_1.expect)(vars2.body.variables.length, 'There is a different number of variables than expected').to.equal(3);
            (0, utils_1.compareVariable)(vars2.body.variables[0], vars2.body.variables[1], false, true, true);
            // check the objects are identical
            childrenA = yield dc.variablesRequest({
                variablesReference: vars2.body.variables[0].variablesReference,
            });
            childrenB = yield dc.variablesRequest({
                variablesReference: vars2.body.variables[1].variablesReference,
            });
            (0, utils_1.compareVariable)(childrenA.body.variables[0], childrenB.body.variables[0], true, true, true);
            (0, utils_1.compareVariable)(childrenA.body.variables[1], childrenB.body.variables[1], true, true, true);
            (0, utils_1.compareVariable)(childrenA.body.variables[2], childrenB.body.variables[2], true, true, true);
        });
    });
    it('can read and set nested variables from a cpp object', function () {
        return __awaiter(this, void 0, void 0, function* () {
            // check initial conditions of fooA and its child elements
            const vr = scope.scopes.body.scopes[0].variablesReference;
            const vars = yield dc.variablesRequest({ variablesReference: vr });
            (0, chai_1.expect)(vars.body.variables.length, 'There is a different number of variables than expected').to.equal(3);
            (0, utils_1.verifyVariable)(vars.body.variables[0], 'fooA', 'Foo *', undefined, {
                hasChildren: true,
            });
            (0, chai_1.expect)(vars.body.variables[0].variablesReference, `${vars.body.variables[0].name} has no children`).to.not.equal(0);
            const childVR = vars.body.variables[0].variablesReference;
            let children = yield dc.variablesRequest({
                variablesReference: childVR,
            });
            (0, chai_1.expect)(children.body.variables.length, 'There is a different number of child variables than expected').to.equal(3);
            (0, utils_1.verifyVariable)(children.body.variables[0], 'a', 'int', '1', {
                hasMemoryReference: false,
            });
            (0, utils_1.verifyVariable)(children.body.variables[1], 'c', 'char', "97 'a'", {
                hasMemoryReference: false,
            });
            (0, utils_1.verifyVariable)(children.body.variables[2], 'b', 'int', '2', {
                hasMemoryReference: false,
            });
            // set child value
            const setChild0 = yield dc.setVariableRequest({
                name: children.body.variables[0].name,
                value: '55',
                variablesReference: vars.body.variables[0].variablesReference,
            });
            (0, chai_1.expect)(setChild0.body.value).to.equal('55');
            // check the new values
            children = yield dc.variablesRequest({
                variablesReference: vars.body.variables[0].variablesReference,
            });
            (0, chai_1.expect)(children.body.variables.length, 'There is a different number of child variables than expected').to.equal(3);
            (0, utils_1.verifyVariable)(children.body.variables[0], 'a', 'int', '55', {
                hasMemoryReference: false,
            });
            // these two values should be unchanged.
            (0, utils_1.verifyVariable)(children.body.variables[1], 'c', 'char', "97 'a'", {
                hasMemoryReference: false,
            });
            (0, utils_1.verifyVariable)(children.body.variables[2], 'b', 'int', '2', {
                hasMemoryReference: false,
            });
        });
    });
});
//# sourceMappingURL=vars_cpp.spec.js.map